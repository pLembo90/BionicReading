(()=>{"undefined"==typeof browser?chrome:browser;const e=document.getElementById("toggleBtn"),t=document.getElementById("toggleReadingMode"),a=document.getElementById("saccadesSlider"),n=document.getElementById("fixationStrengthSlider"),s=document.getElementById("fixationStrengthLabelValue");async function r(e){chrome.tabs.query({active:!0},(t=>{chrome.tabs.sendMessage(t[0].id,{type:"setlineHeight",action:e.target.getAttribute("id"),step:.5},(()=>{chrome.runtime.lastError}))}))}function o(e){const t=Number(e.target.value);d(t),async function(e){chrome.runtime.sendMessage({message:"setSaccadesInterval",data:e},(e=>{})),chrome.tabs.query({},(t=>{t.forEach((t=>new Promise((()=>{try{chrome.tabs.sendMessage(t.id,{type:"setSaccadesIntervalInDOM",data:e},(()=>{chrome.runtime.lastError}))}catch(e){}}))))}))}(t)}function d(e){document.getElementById("saccadesLabelValue").textContent=e}function c(e){document.body.setAttribute("br-mode",e?"on":"off")}chrome.runtime.sendMessage({message:"getSaccadesInterval"},(e=>{const t=void 0===e||null==e.data?0:e.data,n=document.getElementsByTagName("button");for(let e=0;e<n.length;e++){const t=n.item(e),a=t.getAttribute("id");/lineHeight/.test(a)&&t.addEventListener("click",r)}d(t),a.value=t,a.addEventListener("change",o)})),chrome.runtime.sendMessage({message:"getToggleOnDefault"},(e=>{t.checked="true"===e.data})),chrome.tabs.query({active:!0},(([e])=>{chrome.tabs.sendMessage(e.id,{message:"getBrMode",type:"getBrMode"},(e=>{c(e.data)}))})),chrome.runtime.sendMessage({type:"getFixationStrength",message:"getFixationStrength"},(e=>{s.textContent=e.data,n.value=e.data})),e.addEventListener("click",(async()=>{c("off"===document.body.getAttribute("br-mode")),chrome.tabs.query({active:!0},(e=>{chrome.tabs.sendMessage(e[0].id,{type:"toggleReadingMode",data:void 0},(()=>{chrome.runtime.lastError}))}))})),t.addEventListener("change",(async e=>{chrome.runtime.sendMessage({message:"setToggleOnDefault",data:e.target.checked},(e=>{}))})),n.addEventListener("change",(e=>{s.textContent=e.target.value;const t={message:"setFixationStrength",type:"setFixationStrength",data:e.target.value};chrome.tabs.query({active:!0},(([e])=>{chrome.tabs.sendMessage(e.id,t,(e=>{}))})),chrome.runtime.sendMessage(t,(e=>{console.log(e)}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,